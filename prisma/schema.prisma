generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id            String         @id @default(cuid())
  nome          String
  cpf           String?
  endereco      String?
  carteira      String         @unique
  tipo          String
  score         Int            @default(50)
  status        String         @default("ATIVO")
  network       String         @default("sepolia")
  isContract    Boolean        @default(false)
  lastActivity  DateTime?
  createdAt     DateTime       @default(now())
  emprestimos   Emprestimo[]   @relation("Tomador")
  endossos      Endosso[]
  flagsFraude   FlagFraude[]
  poolPositions PoolPosition[]
}

model Emprestimo {
  id              String    @id @default(cuid())
  tomadorId       String
  valorTotal      Int
  taxaAnualBps    Int
  prazoParcelas   Int
  estado          String    @default("PENDENTE")
  dataInicio      DateTime?
  dataFim         DateTime?
  colateral       Int       @default(0)
  valorPago       Int       @default(0)
  hashRegras      String
  contractAddress String?
  txHash          String?
  blockNumber     Int?
  network         String    @default("sepolia")
  onChainId       Int?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  tomador         Usuario   @relation("Tomador", fields: [tomadorId], references: [id])
  endossos        Endosso[]
  parcelas        Parcela[]
}

model Parcela {
  emprestimoId String
  indice       Int
  valor        Int
  dueAt        DateTime
  status       String     @default("ABERTA")
  paidAt       DateTime?
  emprestimo   Emprestimo @relation(fields: [emprestimoId], references: [id])

  @@unique([emprestimoId, indice])
}

model Endosso {
  id            String     @id @default(cuid())
  emprestimoId  String
  apoiadorId    String
  valorStake    Int
  status        String     @default("PENDENTE")
  dataBloqueio  DateTime?
  dataLiberacao DateTime?
  txHash        String?
  blockNumber   Int?
  onChainId     Int?
  createdAt     DateTime   @default(now())
  apoiador      Usuario    @relation(fields: [apoiadorId], references: [id])
  emprestimo    Emprestimo @relation(fields: [emprestimoId], references: [id])
}

model Evento {
  id             String   @id @default(cuid())
  tipo           String
  referenciaId   String
  detalhes       String
  timestamp      DateTime @default(now())
  idempotencyKey String   @unique
}

model FlagFraude {
  id        String   @id @default(cuid())
  usuarioId String
  tipo      String
  createdAt DateTime @default(now())
  revisado  Boolean  @default(false)
  resultado String?
  usuario   Usuario  @relation(fields: [usuarioId], references: [id])
}

model ParametrosSistema {
  versao           String   @id
  tabelaPricing    String
  toleranciaAtraso Int
  tempoParcelaS    Int
  createdAt        DateTime @default(now())
}

model LogsDeDecisao {
  id           String   @id @default(cuid())
  emprestimoId String?
  inputDados   String
  resultado    String
  hashDecisao  String   @unique
  createdAt    DateTime @default(now())
}

model PoolPosition {
  id             String    @id @default(cuid())
  provedorId     String
  amount         Int
  shares         Int
  depositDate    DateTime  @default(now())
  status         String    @default("ATIVO")
  txHash         String?
  blockNumber    Int?
  withdrawTxHash String?
  withdrawDate   DateTime?
  provedor       Usuario   @relation(fields: [provedorId], references: [id])
}

model ContractConfig {
  id             String   @id @default(cuid())
  network        String   @unique
  poolAddress    String?
  factoryAddress String?
  usdcAddress    String
  rpcUrl         String
  blockExplorer  String
  chainId        Int
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Transaction {
  id           String    @id @default(cuid())
  hash         String    @unique
  blockNumber  Int
  network      String
  type         String
  fromAddress  String
  toAddress    String?
  amount       Int?
  gasUsed      Int?
  gasPrice     String?
  status       String    @default("PENDING")
  referenciaId String?
  createdAt    DateTime  @default(now())
  confirmedAt  DateTime?
}
