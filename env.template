# TrustLend MVP Environment Variables Template
# Copy this file to .env.local and fill in the values

# =============================================================================
# Blockchain Configuration (Sepolia Testnet)
# =============================================================================

# Sepolia RPC URL - Get from Alchemy, Infura, or other provider
SEPOLIA_RPC_URL=https://sepolia.infura.io/v3/YOUR-PROJECT-ID

# Chain ID for Sepolia testnet
NEXT_PUBLIC_CHAIN_ID=11155111

# =============================================================================
# Private Key for Server-Side Operations (Demo/Development Only)
# =============================================================================

# WARNING: Never commit real private keys to version control
# This should only be used for local development with test funds
# Generate a new wallet for testing: https://vanity-eth.tk/
PRIVATE_KEY=0x0000000000000000000000000000000000000000000000000000000000000000

# =============================================================================
# Smart Contract Addresses (Deploy your contracts first)
# =============================================================================

# Mock USDC contract address (deploy MockUSDC.sol)
NEXT_PUBLIC_USDC_ADDRESS=0x0000000000000000000000000000000000000000

# TrustLend MVP contract address (deploy TrustLendMVP.sol)
NEXT_PUBLIC_MVP_ADDRESS=0x0000000000000000000000000000000000000000

# =============================================================================
# External API Keys (Optional)
# =============================================================================

# WalletConnect Project ID (Required for wallet connections)
# Get from: https://cloud.walletconnect.com
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=your-walletconnect-project-id-here

# Alchemy API Key (alternative to Infura)
ALCHEMY_OR_INFURA_KEY=your-alchemy-or-infura-key-here

# Etherscan API Key (for contract verification)
ETHERSCAN_API_KEY=your-etherscan-api-key-here

# =============================================================================
# Database Configuration
# =============================================================================

# PostgreSQL database connection (Docker)
DATABASE_URL=postgresql://trustlend:trustlend123@localhost:5432/trustlend

# SQLite fallback (if not using Docker)
# DATABASE_URL=file:./dev.db

# Use in-memory database for testing (set to 1 to enable)
USE_MEMORY=0

# =============================================================================
# Application Settings
# =============================================================================

# Next.js environment
NODE_ENV=development

# =============================================================================
# Demo/Mock Mode Settings
# =============================================================================

# The application automatically detects mock mode via ?mock=1 URL parameter
# No additional configuration needed for mock functionality

# =============================================================================
# Setup Instructions
# =============================================================================

# 1. Copy this file to .env.local:
#    cp env.template .env.local

# 2. Get a Sepolia RPC URL:
#    - Sign up at Alchemy (https://alchemy.com) or Infura (https://infura.io)
#    - Create a new project
#    - Copy the Sepolia endpoint URL

# 3. Get test ETH for Sepolia:
#    - Use a Sepolia faucet (https://sepoliafaucet.com/)
#    - Send test ETH to your wallet address

# 4. Deploy contracts (optional):
#    - Deploy MockUSDC and TrustLendMVP contracts
#    - Update the contract addresses above
#    - Or use mock mode for demo purposes

# 5. Install dependencies and start:
#    npm install
#    npm run dev

# =============================================================================
# Security Notes
# =============================================================================

# - Never commit .env.local to version control
# - Use test wallets only with small amounts of test ETH
# - Private keys should only be used for development
# - In production, use secure key management systems
# - Rotate keys regularly and monitor for unauthorized access

# =============================================================================
# Troubleshooting
# =============================================================================

# If you encounter issues:

# 1. Database errors:
#    - Delete ./dev.db and restart the application
#    - Or set USE_MEMORY=1 for in-memory database

# 2. RPC connection errors:
#    - Verify your RPC URL is correct
#    - Check if you have rate limits on your provider
#    - Try switching to a different RPC provider

# 3. Transaction failures:
#    - Ensure you have enough test ETH for gas
#    - Check if contract addresses are correct
#    - Use mock mode (?mock=1) for testing without blockchain

# 4. Build errors:
#    - Run: rm -rf .next && npm run build
#    - Ensure all required environment variables are set
#    - Check that Node.js version is compatible (>=18.17)
